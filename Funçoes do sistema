//Consulta o saldo do usuario, tanto dos Reais e das criptomoedas compradas
void consultar_saldo(Usuario *usuario_atual) {
    printf("\nSaldo Atual:\n");
    printf("Reais: R$ %.2f\n", usuario_atual->saldo_reais);
    printf("Bitcoin: %.6f BTC\n", usuario_atual->saldo_bitcoin);
    printf("Ethereum: %.6f ETH\n", usuario_atual->saldo_ethereum);
    printf("Ripple: %.6f XRP\n", usuario_atual->saldo_ripple);
}

// Deposita a quantia de Reais de sua escolha
void depositar_reais(Usuario *usuario_atual) {
    float valor;
    printf("Digite o valor para depositar em reais: ");
    scanf("%f", &valor);
    usuario_atual->saldo_reais += valor;
    printf("Depósito realizado com sucesso! Saldo atual: R$ %.2f\n", usuario_atual->saldo_reais);
}

// Saca a quantia de Reais a sua escolha, Caso pegue mais do que foi depositado, dara resultado de Saldo insuficiente.
void sacar_reais(Usuario *usuario_atual) {
    float valor;
    printf("Digite o valor para sacar em reais: ");
    scanf("%f", &valor);

    if (valor > usuario_atual->saldo_reais) {
        printf("Saldo insuficiente!\n");
    } else {
        usuario_atual->saldo_reais -= valor;
        printf("Saque realizado com sucesso! Saldo atual: R$ %.2f\n", usuario_atual->saldo_reais);
    }
}

//Atualiza a cotação entre -5% a +5%, conforme o requisitado.
void atualizar_cotacao(float *cotacao_bitcoin, float *cotacao_ethereum, float *cotacao_ripple) {
    *cotacao_bitcoin += (*cotacao_bitcoin * (rand() % 11 - 5) / 100.0); // Varia entre -5% a +5%
    *cotacao_ethereum += (*cotacao_ethereum * (rand() % 11 - 5) / 100.0);
    *cotacao_ripple += (*cotacao_ripple * (rand() % 11 - 5) / 100.0);

    printf("\nCotações atualizadas:\n");
    printf("Bitcoin: R$ %.2f\n", *cotacao_bitcoin);
    printf("Ethereum: R$ %.2f\n", *cotacao_ethereum);
    printf("Ripple: R$ %.2f\n", *cotacao_ripple);
}

//Feito para comprar as criptomoedas, tendo um valor variado em cada, caso o usuario possua um saldo insuficiente, aparecera a mensagem, "Saldo insuficiente em reais". 
void comprar_criptomoeda(Usuario *usuario_atual, float cotacao_bitcoin, float cotacao_ethereum, float cotacao_ripple) {
    int opcao;
    float valor, quantidade;

    printf("Escolha a criptomoeda para comprar:\n");
    printf("1. Bitcoin (BTC)\n");
    printf("2. Ethereum (ETH)\n");
    printf("3. Ripple (XRP)\n");
    printf("Opção: ");
    scanf("%d", &opcao);

    printf("Digite o valor em reais para investir: ");
    scanf("%f", &valor);

    if (valor > usuario_atual->saldo_reais) {
        printf("Saldo insuficiente em reais.\n");
        return;
    }

    switch (opcao) {
        case 1:
            quantidade = valor / cotacao_bitcoin;
            usuario_atual->saldo_bitcoin += quantidade;
            break;
        case 2:
            quantidade = valor / cotacao_ethereum;
            usuario_atual->saldo_ethereum += quantidade;
            break;
        case 3:
            quantidade = valor / cotacao_ripple;
            usuario_atual->saldo_ripple += quantidade;
            break;
        default:
            printf("Opção inválida.\n");
            return;
    }

    usuario_atual->saldo_reais -= valor;
    printf("Compra realizada com sucesso. Saldo em reais: R$ %.2f\n", usuario_atual->saldo_reais);
}

//Void feito para o menu com as principais opcoes.
void exibir_menu() {
    printf("\n----- Menu -----\n");
    printf("1. Consultar saldo\n");
    printf("2. Consultar extrato\n");
    printf("3. Depositar reais\n");
    printf("4. Sacar reais\n");
    printf("5. Comprar criptomoeda\n");
    printf("6. Vender criptomoeda\n");
    printf("7. Atualizar cotações\n");
    printf("8. Sair\n");
    printf("----------------\n");
}

//Consulta o extrato de transferencias 
void consultar_extrato(Carteira *carteira) {
    printf("\nExtrato de transações:\n");
    for (int i = 0; i < carteira->num_transacoes; i++) {
        Transacao t = carteira->transacoes[i];
        printf("Operação: %s | Criptomoeda: %s | Valor: R$ %.2f | Taxa: R$ %.2f | Data: %s", 
               t.tipo_operacao, t.criptomoeda, t.valor, t.taxa, ctime(&t.data));
    }
}