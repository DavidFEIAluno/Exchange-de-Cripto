#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define MAX_USUARIOS 10
#define MAX_TRANSACOES 100

// Estruturas para usuário, transação e carteira
typedef struct {
    char nome[50];
    char cpf[15];
    char senha[11];
    float saldo_reais;
    float saldo_bitcoin;
    float saldo_ethereum;
    float saldo_ripple;
} Usuario;

typedef struct {
    char tipo_operacao[10];
    char criptomoeda[10];
    float valor;
    float taxa;
    time_t data;
} Transacao;

typedef struct {
    Usuario usuario;
    Transacao transacoes[MAX_TRANSACOES];
    int num_transacoes;
} Carteira;

// Funções auxiliares
int validar_cpf(const char *cpf) {
    if (strlen(cpf) != 14 || cpf[3] != '.' || cpf[7] != '.' || cpf[11] != '-') {
        return 0; // CPF deve estar no formato "xxx.xxx.xxx-xx"
    }
    for (int i = 0; i < 14; i++) {
        if (i == 3 || i == 7 || i == 11) continue; // Pula pontos e traços
        if (!isdigit(cpf[i])) return 0; // Todos os outros caracteres devem ser dígitos
    }
    return 1;
}

int validar_senha(const char *senha) {
    return strlen(senha) >= 6;
}

// Void parra o cadastro de usuario
void cadastrar_usuario(Usuario usuarios[], int *num_usuarios) {
    if (*num_usuarios >= MAX_USUARIOS) {
        printf("Limite de usuários alcançado.\n");
        return;
    }

    Usuario novo_usuario;

    // Codigo para o NOme
    printf("Digite o nome do usuário: ");
    scanf(" %[^\n]", novo_usuario.nome);

    // Aqui valida o CPF, obrigatorio ser no modelo XXX.XXX.XXX-XX, Deve se colocar os . e o -
    do {
        printf("Digite o CPF (formato xxx.xxx.xxx-xx): ");
        scanf("%s", novo_usuario.cpf);
        if (!validar_cpf(novo_usuario.cpf)) {
            printf("CPF inválido. Tente novamente.\n");
        }
    } while (!validar_cpf(novo_usuario.cpf));

    // Validação de senha
    do {
        printf("Digite a senha (mínimo 6 caracteres): ");
        scanf("%s", novo_usuario.senha);
        if (!validar_senha(novo_usuario.senha)) {
            printf("Senha inválida. Tente novamente.\n");
        }
    } while (!validar_senha(novo_usuario.senha));

    novo_usuario.saldo_reais = 0.0;
    novo_usuario.saldo_bitcoin = 0.0;
    novo_usuario.saldo_ethereum = 0.0;
    novo_usuario.saldo_ripple = 0.0;

    usuarios[*num_usuarios] = novo_usuario;
    (*num_usuarios)++;
    printf("Usuário cadastrado com sucesso.\n");
}
